#!/bin/bash

# Enable strict error handling
set -euo pipefail

# Get the root directory of the repository
REPO_ROOT=$(git rev-parse --show-toplevel)
HOOKS_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
COMPRESSOR="$REPO_ROOT/target/universal-compressor-1.0-SNAPSHOT.jar"
CONFIG_FILE="$REPO_ROOT/compression-config.json"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Logging functions
info() { echo -e "${GREEN}[INFO]${NC} $1"; }
warn() { echo -e "${YELLOW}[WARN]${NC} $1" >&2; }
error() { echo -e "${RED}[ERROR]${NC} $1" >&2; }

# Check if the compressor exists
if [ ! -f "$COMPRESSOR" ]; then
    error "Compressor not found at $COMPRESSOR"
    info "Building the project..."
    if ! (cd "$REPO_ROOT" && mvn clean package); then
        error "Failed to build the project"
        exit 1
    fi
    if [ ! -f "$COMPRESSOR" ]; then
        error "Compressor still not found after build. Please check the build output."
        exit 1
    fi
    info "Project built successfully"
fi

# Check if config file exists
if [ ! -f "$CONFIG_FILE" ]; then
    error "Config file not found at $CONFIG_FILE"
    exit 1
fi

# Check for required commands
for cmd in jq file java; do
    if ! command -v "$cmd" >/dev/null 2>&1; then
        error "Required command not found: $cmd"
        exit 1
    fi
done

# Create a temporary directory for our work
TEMP_DIR=$(mktemp -d)
trap 'rm -rf "$TEMP_DIR"' EXIT

# File to track compressed files
COMPRESSED_FILES="$REPO_ROOT/.compressed_files"
NEW_COMPRESSED_FILES="$TEMP_DIR/new_compressed_files"
> "$NEW_COMPRESSED_FILES"

# Load existing compressed files if they exist
if [ -f "$COMPRESSED_FILES" ]; then
    cp "$COMPRESSED_FILES" "$TEMP_DIR/previous_compressed"
else
    > "$TEMP_DIR/previous_compressed"
fi

# Function to check if a file matches any pattern
matches_pattern() {
    local file="$1"
    local pattern_list_name="$2"
    
    # Convert Windows path to Unix-style for pattern matching
    local unix_file=$(echo "$file" | sed 's/\\/\//g')
    
    # Get patterns from config
    local patterns=()
    while IFS= read -r pattern; do
        patterns+=("$pattern")
    done < <(jq -r ".file_patterns.${pattern_list_name}[]" "$CONFIG_FILE" 2>/dev/null)
    
    # Check against each pattern
    for pattern in "${patterns[@]}"; do
        if [[ "$unix_file" == $pattern ]]; then
            return 0
        fi
    done
    return 1
}

# Function to get compression method for a file
get_compression_method() {
    local file="$1"
    local size="$2"
    
    # Check if it's a text file
    local mime_type=$(file -b --mime-type "$file" || true)
    local is_text=false
    if [[ "$mime_type" == text/* ]]; then
        is_text=true
    fi
    
    # Check if it's a text file by extension if mime type check failed
    if ! $is_text && matches_pattern "$file" "text_files"; then
        is_text=true
    fi
    
    # Get compression method from config
    if $is_text; then
        jq -r '.auto_detect.text_files' "$CONFIG_FILE"
    elif [ "$size" -gt 52428800 ]; then  # > 50MB
        jq -r '.auto_detect.large_binary_files' "$CONFIG_FILE"
    elif [ "$size" -gt 10485760 ]; then  # > 10MB
        jq -r '.auto_detect.medium_binary_files' "$CONFIG_FILE"
    else
        jq -r '.auto_detect.small_binary_files' "$CONFIG_FILE"
    fi
}

# Function to compress a file
compress_file() {
    local src="$1"
    local method="$2"
    local dst="${src}.${method}"
    
    # Get compression level if specified for this method
    local level=$(jq -r ".compression_methods[] | select(.name == \"$method\") | .level // 9" "$CONFIG_FILE")
    
    info "Compressing $src with $method (level: $level)"
    
    # Use Java compressor with appropriate method
    if ! java -jar "$COMPRESSOR" compress "$src" "$dst" "$method"; then
        error "Failed to compress $src with $method"
        rm -f "$dst" 2>/dev/null || true
        return 1
    fi
    
    # Verify compression was successful
    if [ ! -f "$dst" ]; then
        error "Compressed file not created: $dst"
        return 1
    fi
    
    # Calculate compression ratio
    local orig_size=$(stat -c%s "$src" 2>/dev/null || stat -f%z "$src" 2>/dev/null)
    local comp_size=$(stat -c%s "$dst" 2>/dev/null || stat -f%z "$dst" 2>/dev/null)
    local ratio=$(awk -v o="$orig_size" -v c="$comp_size" 'BEGIN { printf "%.1f%%", (1-c/o)*100 }')
    
    info "Compressed $src (${orig_size} bytes) to $dst (${comp_size} bytes, ${ratio} reduction)"
    
    # Add to compressed files list
    echo "$src|$dst|$method" >> "$NEW_COMPRESSED_FILES"
    
    # Remove original file
    rm -f "$src"
    
    # Add compressed file to git
    git add "$dst"
    
    # Remove original from git index
    git rm -q --cached "$src" 2>/dev/null || true
    
    return 0
}

# Get configuration values
MIN_FILE_SIZE=$(jq -r '.compression.min_file_size' "$CONFIG_FILE" 2>/dev/null || echo "1048576")  # 1MB default
MIN_COMPRESSION_RATIO=$(jq -r '.compression.min_compression_ratio' "$CONFIG_FILE" 2>/dev/null || echo "0.10")  # 10% default
MAX_COMPRESSION_TIME_MS=$(jq -r '.compression.max_compression_time_ms' "$CONFIG_FILE" 2>/dev/null || echo "300000")  # 5 minutes default
BUFFER_SIZE_MB=$(jq -r '.compression.buffer_size_mb' "$CONFIG_FILE" 2>/dev/null || echo "32")
ENABLE_MULTITHREADING=$(jq -r '.compression.enable_multithreading' "$CONFIG_FILE" 2>/dev/null || echo "true")
THREAD_COUNT=$(jq -r '.compression.thread_count' "$CONFIG_FILE" 2>/dev/null || echo "0")

# Set Java options
JAVA_OPTS="-Xmx${BUFFER_SIZE_MB}m"
if [ "$ENABLE_MULTITHREADING" = "true" ]; then
    if [ "$THREAD_COUNT" -gt 0 ] 2>/dev/null; then
        JAVA_OPTS="$JAVA_OPTS -Djava.util.concurrent.ForkJoinPool.common.parallelism=$THREAD_COUNT"
    fi
fi

export JAVA_OPTS

info "Starting compression with min_size=$MIN_FILE_SIZE, min_ratio=$MIN_COMPRESSION_RATIO"

# Check for modified/added files that need compression
while IFS= read -r file; do
    # Skip empty lines
    [ -z "$file" ] && continue
    
    # Skip if file is in exclude patterns
    if matches_pattern "$file" "$EXCLUDE_PATTERNS"; then
        echo "Skipping excluded file: $file"
        continue
    fi
    
    # Get the full path
    full_path="$REPO_ROOT/$file"
    
    # Skip if file doesn't exist (was deleted or moved)
    if [ ! -f "$full_path" ]; then
        continue
    fi
    
    # Skip if file is too small
    file_size=$(wc -c < "$full_path" 2>/dev/null || echo 0)
    if [ "$file_size" -lt "$MIN_FILE_SIZE" ]; then
        echo "Skipping small file ($(numfmt --to=iec-i --suffix=B "$file_size")): $file"
        continue
    fi
    
    # Skip excluded files
    if matches_pattern "$file" "exclude"; then
        info "Skipping $file: Matches exclude pattern"
        ((skipped_count++))
        continue
    fi
    
    # Check if file is already compressed
    if [[ "$file" =~ \.(gz|bz2|xz|zst|br|7z)$ ]]; then
        info "Skipping $file: Already compressed"
        ((skipped_count++))
        continue
    fi
    
    # Check if file should be compressed based on patterns
    if ! matches_pattern "$file" "compress"; then
        info "Skipping $file: Does not match any compress patterns"
        ((skipped_count++))
        continue
    fi
    
    # Determine compression method
    compression_method=$(get_compression_method "$file" "$file_size")
    if [ -z "$compression_method" ]; then
        warn "Could not determine compression method for $file, using default"
        compression_method="zstd"
    fi
    
    # Compress the file
    if compress_file "$file" "$compression_method"; then
        ((compressed_count++))
    else
        ((error_count++))
    fi
done < <(git diff --cached --name-status --no-renames)

# Update the compressed files list
if [ -s "$NEW_COMPRESSED_FILES" ]; then
    # Merge with existing compressed files, removing any entries for files we just processed
    if [ -s "$TEMP_DIR/previous_compressed" ]; then
        grep -v -F -f <(cut -d'|' -f1 "$NEW_COMPRESSED_FILES") "$TEMP_DIR/previous_compressed" > "$TEMP_DIR/merged_compressed" 2>/dev/null || true
        cat "$NEW_COMPRESSED_FILES" >> "$TEMP_DIR/merged_compressed"
        mv "$TEMP_DIR/merged_compressed" "$COMPRESSED_FILES"
    else
        cp "$NEW_COMPRESSED_FILES" "$COMPRESSED_FILES"
    fi
    
    # Add the compressed files list to git
    git add "$COMPRESSED_FILES"
    
    info "Compression complete: $compressed_count files compressed, $skipped_count skipped, $error_count errors"
    
    if [ "$error_count" -gt 0 ]; then
        warn "There were $error_count errors during compression. Check the output above for details."
    fi
else
    info "No files needed compression"
    git add -f "$PROCESSED_FILES"
    echo -e "\nCompressed files have been added to the staging area."
    echo "These files will be automatically decompressed after checkout."
    echo "To view compressed files: git diff --cached"
    echo "Original files will be restored when you check out this commit."
fi

exit 0
